# Weather Data {#sec-weather-data}

## Summary (for co-authors)

- This chapter provides a short intro to weather station data, with code examples for importing station data. 

- The main goal of the chapter is to provide code recipes for importing, cleaning and saving weather data. The data files (csvs) generated by the examples in this chapter will be saved within the repo, for use in other chapters

- The general data wrangling techniques / R packages used in this chapter are discussed in @sec-data-wrangling. 

- We do not plan to discuss weather variables in any detail. Most of the examples in this book use temperature and precipitation (because those are the most common inputs into agroclimate metrics). This can be expanded in the future. We can provide links to other resources to learn more about weather variables.

- This chapter focuses on importing station data (i.e., tabular). Interpolted weather raster data will be covered in Chapter 6. Agroclimate rasters. Modeled weather data from climate models (also raster) will be covered in ch 7. modeled climate data.

- Future topics

    - cleaning weather data (filling in missing values, range checks)

    - see also <https://ucanr-igis.github.io/agroclimR/slides/agclimr_slides01.html#(12)>

## Intro {#weather-data-intro}

Computing agroclimate metrics starts with weather data - a time series of variables such as temperature and precipitation. These could be based on actual measurements from a weather station, or generated from a weather model. 

::: {.callout-note title="Computing agroclimate metrics from modeled weather data"}
It may seem surprising that either observed (i.e., 'real') or modeled (i.e., computer generated) weather data can be used to compute agroclimate metrics. What does it mean, and why would someone want to, compute something like degree days with modeled (i.e., computer generated) data?

For the purposes of computation, the metrics don't care where the data come from. If you give the degree day equation a record of temperature values, it will give you back the metric. It doesn't care whether the data are 'real' or 'made up'. But of course what you do with that metric depends a great deal on where the weather data came from. 

Metrics computed from actual measurements, and metrics computed from weather models, are used for different purposes. If you're a grower, you probably wouldn't want to schedule your irrigation based on the simulated weather from a climate model. Likewise, if you're a water control engineer, you probably wouldn't want to plan the size of your flood infrastructure for the next 50 years based solely on the weather from the past couple of years. 

Each type of weather data has appropriate and inappropriate uses. But the good news is that agroclimate metrics are generally based on plant and insect physiology, so they work for all kinds of data past, present, and future. A metric that predicts nut development for a particular cultivar today is still a pretty good guess for nut development rates in the past as well as 50 years from now.
:::

There are a few characteristics of weather data to be aware of:

**Variables**. Weather data typically consists of one or more variables, such as temperature, precipitation, or solar radiation. Some variables are measured directly. Others may be based on models (such as evapotranspiration).

::: {.callout-note title="CIMIS Weather Variables"}
The weather variables recorded by weather stations in the CIMIS network (@sec-weather-data-cimis-station below) include:

```{r}
cimir::cimis_items() |> dplyr::pull(Name) |> unique()
```
:::

**Temporal resolution**. The time resolution of weather data depends on the source. Measurements from a modern weather station could be recorded as often as every 5 minutes. That doesn't necessarily mean you'll have access to data every 5 minutes (which is generally overkill anyway), unless of course you manage the station. Organizations that run weather stations typically provide the data in hourly and/or daily time steps, depending on the needs of their customers. Older data are often only available as daily averages.

::: {.callout-note title="Are more data always better?" collapse="true"}
When it comes to weather data for computing agroclimate metrics, more is not necessarily better. Many agroclimate metrics, and more importantly the decision making models derived from those metrics, were developed based on daily data. Hence, even if you have 5-minute data, to use those decision support models that tell you for example when you can turn down the irrigation, you'll have to resample the 5-minute data to daily averages anyway.

In general, try to download the data at the time interval needed for your application. 

Some notable agroclimate metrics that really require hourly data are chill portions and growing degree hours. Changing the time resolution of data is discussed in @sec-weather-data-temp-res below.

:::

## Weather Data Sources

::: {.callout-tip title="Best Practices for Importing Weather Data "}

1. Date columns should be converted to R `Date` class  
2. Date-time columns should be saved as R `POSIXct` objects, with the timezone assigned (local time is generally preferable)  
3. Units should be indicated in column names, accompanying metadata, or by saving values as a `units` object. 

:::

### CIMIS Station Data {#sec-weather-data-cimis-station}

[CIMIS](https://cimis.water.ca.gov/) is a network of about 150 weather stations in California, operated by the CA Dept. of Water Resources. The network was established to inform irrigation management, hence the stations are mostly in agricultural regions. 

CIMIS stations are a bit different from other networks in that:

i) stations are located on grass fields (a golf course would be a perfect place for a CIMIS station)  

ii) the stations record evapotranspiration (actually, modeled evapotranspiration) as one of the 'weather' variables

They do this because the 'reference' evapotranspiration coming off the grass can be used to estimate evapotranspiration of various crops (by multiplying the reference ET by coefficients determined from research). In turn, the estimated crop ET can be used to compute the water replenishment needs. 

CIMIS data are widely used for many other agricultural applications as well. It is a popular dataset in part because its freely available and can be accessed through the CIMIS website as well as an API. 

#### CIMIS API

To import CIMIS  data into R via the API, you can use the [cimir](https://hydroecology.net/cimir/) package [@R-cimir]. You'll also need:

- a CIMIS API key (which you can get by creating a free CIMIS account [here](https://et.water.ca.gov/))  

- the id number(s) of the weather station(s) of interest (which you can find on the [CIMIS website](https://cimis.water.ca.gov/Stations.aspx))

- the abbreviated names of weather variables (see `cimis_items()`)

[cimir](https://hydroecology.net/cimir/) provides R functions to import data using the CIMIS API. The main download function is `cimir::cimis_data()`, which can be used to download a range of weather variables (depending on the `items` argument) at both daily and hourly intervals. 

#### Import CIMIS Daily Data

Below, we'll download one year of daily data for CIMIS Station 227 (located in Plymouth, Amador County). We begin by loading the packages we'll be using for data wrangling:

```{r message=FALSE}
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(readr)
library(cimir)
```

Below, we'll use `cimis_data()` to get daily precipitation and temperature:

```{r}
#| cache: true

## Step 1. Load my cimis key
my_cimis_key <- readLines("~/My Keys/cimis_webapi.txt", n=1)
cimir::set_key(my_cimis_key)

### Query CIMIS data (Plymouth station #227)
cim_ply_lng_tbl <- cimir::cimis_data(targets = 227, 
                                     start.date = "2023-01-01", 
                                     end.date = "2023-12-31",
                                     measure.unit = "E",
                                     items = "day-precip,day-air-tmp-max,day-air-tmp-min")

head(cim_ply_lng_tbl)
```

\

As can be seen above, `cimir::cimis_data()` returns a tibble in a 'long' format. R generally likes long data, but for our purposes of saving it as a CSV file, we'll next use `tidyr::pivot_wider()` to reshape it in the more traditional wide format:

```{r}
#| cache: true

cimis227_dly_tbl <- cim_ply_lng_tbl |> 
  select(Station, Date, Item, Value) |> 
  tidyr::pivot_wider(id_cols = c(Station, Date), names_from = Item, 
                     values_from = Value) |> 
  rename(stn_id = Station, date = Date, tmax_f = DayAirTmpMax, tmin_f = DayAirTmpMin, 
         precip_in = DayPrecip)

head(cimis227_dly_tbl)
```

\

Finally, we can save the tibble to disk:

```{r eval = !file.exists("./data/cimis227_dly.csv")}
write_csv(cimis227_dly_tbl, file = "./data/cimis227_dly.csv")
```

::: {.callout-tip title="Code to import the daily data CSV file" collapse="true"}
To use these data in examples, you can import the CSV file with either of the following:

Import from online (works from anywhere):

```{r eval=FALSE}
cimis227_dly_tbl <- readr::read_csv("https://github.com/ucanr-igis/xxx", 
                                   col_types = "cDddd")
```

\

If you are working in the RStudio project for this e-book (e.g., authors), use:

```{r eval=FALSE}
cimis227_dly_tbl <- readr::read_csv("./data/cimis227_dly.csv", 
                                   col_types = "cDddd")
```
:::

\

**Visualize daily temperature**

```{r}
#| cache: TRUE

library(ggplot2)
ggplot(cimis227_dly_tbl, aes(x = date, y = tmin_f)) + 
  geom_line() + 
  xlab(NULL) +
  ylab("temp (F)") +
  labs(title = "Minimum Daily Temperature",
       subtitle = "CIMIS Station #227 - Plymouth")
```

#### CIMIS Hourly Data

CIMIS stations record measurements hourly. You can import hourly data with `cimir`, but the maximum number of records you can get from the API in one call is 1750 (about 5 months of data if you're getting two variables every hour). Thus if you wanted an entire year of hourly data, you would have to make multiple calls for shorter periods and stack them together.

An alternative way to download hourly data is to use the [CIMIS Station Reports](https://cimis.water.ca.gov/WSNReportCriteria.aspx) tool on the CIMIS website. This tool allows you to specify station(s), start and end date(s), and weather variables. You can then get the data as a web report, csv, xml, or pdf. 

::: {.callout-tip title="Sign-in before generating CIMIS Station reports"}
To get the most options with CIMIS Station Reports, be sure to be logged-in with your CIMIS account. If you're not logged in, you can still create station reports, but you'll be limited to a few preset "limited reports", which only go back 7 days and are only available to view in your browser.
:::

Below, we'll import a CIMIS Station Report containing one year of hourly air temperature and precipitation measurements for CIMIS station 227 - Plymouth (Amador County). 

```{r}
#| cache: true

station_report_fn <- "./data/cimis_plymouth_station-report-2023.csv"

## Import the CSV file using readr and dplyr
cim_plymouth_hourly_tbl <- readr::read_csv(station_report_fn,
                                           col_types = "ncccccdcdc") |> 
  rename(stn_id = `Stn Id`, station_name = `Stn Name`, region = `CIMIS Region`,
         date_chr = Date, hour_pst = `Hour (PST)`, yday = Jul,
         precip_in = `Precip (in)`, precip_qc = `qc...8`,
         temp_f = `Air Temp (F)`, temp_qc = `qc...10`) |> 
  mutate(stn_id = as.character(stn_id))  ## for consistency with other datasets

head(cim_plymouth_hourly_tbl)
```

\

Next, we'll create a cleaned-up version that we can save. First thing is to combine the Date and Hour columns into a R date-time class (POSIXct):

```{r}
#| cache: true

cimis227_hrly_tbl <- cim_plymouth_hourly_tbl |> 
  mutate(datetime = mdy_h(paste(date_chr, as.numeric(hour_pst) / 100), 
                          tz = "America/Los_Angeles")) 

head(cimis227_hrly_tbl)
```

::: {.callout-caution title="Daylight Savings Time"}
When you're switching the time zone of hourly data, you might get a parsing error if the time period includes the night when daylight savings time starts or ends.

The problem occurs because local time takes into account daylight savings. This is normally a good thing. However when the clock 'falls back', an entire hour of UTC time gets mapped onto the same local time. Similiarly on the night when you jump forward, 2:00am doesn't exist in local time. 

The workaround is to keep your data in UTC, or just ignore the warning. 
:::

\

Lastly, we can save the data as a csv file: 

::: {.callout-tip title="Saving date-times in CSV files"}
To save date-time values in CSV files (which are just text), a good practice is to format it in ISO8601 format, which is a well-established open standard for formatting time values as text, including timezone. 

lubridate provides a function `format_ISO8601()` which makes this easy. The `usetz` argument appends the time offset from UTC, which import functions can use to figure out the time zone.

```{r}
#| cache: true
lubridate::format_ISO8601(Sys.time(), usetz = TRUE)
```

You can import date-times formatted as ISO8601 back into R using `lubridate::ymd_hms()`.
:::


```{r eval = !file.exists("./data/cimis227_hrly.csv")}
cimis227_hrly_tbl |> 
  mutate(dt = format_ISO8601(datetime, usetz = TRUE)) |> 
  select(stn_id, dt, temp_f, precip_in) |> 
  write_csv("./data/cimis227_hrly.csv")
```


::: {.callout-tip title="Code to import the hourly data CSV file" collapse="true"}
To import these data into R, you can run one of the following:

Import from online (works from anywhere):

```{r eval=FALSE}
cimis227_hrly_tbl <- readr::read_csv("https://github.com/ucanr-igis/xxx", 
                                   col_types = "Dddd")
```

If you are working in the RStudio project for this e-book (e.g., authors):

```{r eval=FALSE}
cimis227_hrly_tbl <- readr::read_csv("./data/cimis227_hrly.csv", 
                                   col_types = "Dddd")
```
:::

\

### Synoptic

Show how to get weather data from a weather station on Synoptic, 

<https://ucanr-igis.github.io/sketchbook/synoptic-cimis.html>

\

### gridMet & Prism {#sec-weather-data-gridmet}

PRISM and gridMet are rasters of weather variables, interpolated from observed weather data.

gridMet is available via the Cal-Adapt API (up thru 2021?)

PRISM is available as NetCDF (I think). Only the 4k product is free.

Put these in @sec-rasters (will use `stars` to work with)

\

## Cleaning Weather Data {#sec-weather-data-cleaning-data}

### Dealing with bad measurements

range checks

### Missing data {#sec-weather-data-missing-data}

see <https://inresgb-lehre.iaas.uni-bonn.de/chillR_book/filling-gaps-in-temperature-records.html>

\

## Changing the Temporal Resolution of Weather Data {#sec-weather-data-temp-res}

### Short to Long

If you have timeseries data at short intervals (e.g. hourly), summarizing them by longer intervals (e.g., daily) is technically pretty straightforward using `group_by()` and `summarise()` from `dplyr`. However you have to think carefuly about which summary function is appropriate for the variable you're interested in. The usual suspects are average, min, max. 

::: {.callout-important title="Getting the time zone right"}
If you're summarizing hourly data (or shorter) to daily intervals, and you're using the traditional definition of a 'day' as starting and ending at midnight, then you'll want to make sure your data are in local time. Otherwise you'll be computing 24-hour summaries that start and end at 2pm (if your station is in the western USA, for example).
:::

TODO: Give an example of using dplyr to group hourly CIMIS data into daily. Compare with the daily CIMIS data.


### Interpolating Shorter Intervals

Going from daily values to hourly values,is less straightforward and requires a model for the downscaling. Most (all) weather variables don't vary linearly over the course of the day, nor do they vary consistently over the seasons. 

For more info, see:

<https://inresgb-lehre.iaas.uni-bonn.de/chillR_book/making-hourly-temperatures.html>

